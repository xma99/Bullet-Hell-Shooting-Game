Move in the opposite direction:
In order to achieve the opposite movement control caused when the player is affected by the boss skill, the idea is to implement a state mode where the player's movement behavior changes according to his current state. First we need to create an interface that defines the behavior of different player states. These include methods such as UpdateMovement and HandleInput. Then implement specific state classes for different player states. Normally, the player uses a NormalState, where movement controls work as usual, and a DizzyState, where movement controls are reversed. Modify the player class to maintain a reference to the current state and delegate movement and input handling to the current state. We also need to determine that when the player is hit by the boss's specific skill, change the player's state to DizzyState. When the stun effect wears off, change the state back to NormalState.

Game screen inversion:
The idea is to have a mechanic for the player and boss to swap positions and behavior when the player is hit by the boss's special ability, thus enabling a reversal. We need to define a position swap mechanism to implement a way to swap player and boss positions. This involves updating their position on the screen and adjusting their shooting direction. We can define the player's position = the boss's current position, and then the boss's position = the game's start position. Then we also need to modify the direction of the bullet so that the player and the boss shoot in opposite directions after swapping positions. We need to introduce different states for the player and boss to handle the behavior before and after the position swap. Players have a "normal" state and an "inverted" state, and the same goes for bosses. When a player is hit by a specific skill of the boss, position transposition is triggered and the game is updated accordingly.